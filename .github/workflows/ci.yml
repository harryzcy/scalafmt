name: CI
on:
  push:
    branches:
      - main
    tags_ignore:
      - '*'
  pull_request:
  release:
    types: [published]

permissions:
  contents: read

jobs:
  test:
    if: github.event_name != 'release'
    strategy:
      fail-fast: false
      max-parallel: 8
      matrix:
        java:
          - '11'
          - '21'
        os:
          - windows-latest
          - ubuntu-latest
          - ubuntu-24.04-arm
        platform:
          - 'jvm'
          - 'native'
        scala:
          - '2.12.20'
          - '2.13.16'
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up JVM
        uses: actions/setup-java@v4
        with:
          java-version: ${{ matrix.java }}
          distribution: 'temurin'
          cache: 'sbt'
      - uses: sbt/setup-sbt@v1
      - run:
          # for GitOps tests
          git config --global user.email "scalafmt@scalameta.org" && git config --global user.name "scalafmt"
      - run: sbt ++${{ matrix.scala }} ci-test-${{ matrix.platform }}
        shell: bash
  community-test:
    if: github.event_name != 'release'
    strategy:
      fail-fast: false
      matrix:
        java: [ '11' ]
        os: [windows-latest, ubuntu-latest, ubuntu-24.04-arm]
        group: [Scala2, Scala3, Spark, Intellij, Other]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up JVM
        uses: actions/setup-java@v4
        with:
          java-version: ${{ matrix.java }}
          distribution: 'temurin'
          cache: 'sbt'
      - uses: sbt/setup-sbt@v1
      - run: sbt communityTests${{ matrix.group }}/test
  formatting:
    if: github.event_name != 'release'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          java-version: '11'
          distribution: 'temurin'
          cache: 'sbt'
      - run: ./scalafmt --test
      - run: yarn install
      - run: yarn format-check
  native-image: # deprecated, will soon be removed
    permissions:
      contents: write  # for actions/upload-release-asset to upload release asset
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [macOS-latest, ubuntu-latest, ubuntu-24.04-arm]
        libc: [default, musl]
        exclude:
          - os: macOS-latest
            libc: musl
        include:
          - os: macOS-latest
            artifact: scalafmt-macos
            env:
              NATIVE_IMAGE_STATIC: none
          - os: ubuntu-latest
            libc: default
            artifact: scalafmt-linux-glibc
            env:
              NATIVE_IMAGE_STATIC: nolibc
          - os: ubuntu-latest
            libc: musl
            artifact: scalafmt-linux-musl
            env:
              NATIVE_IMAGE_STATIC: musl
          - os: ubuntu-24.04-arm
            libc: default
            artifact: scalafmt-linux-glibc-arm64
            env:
              NATIVE_IMAGE_STATIC: nolibc
          - os: ubuntu-24.04-arm
            libc: musl
            artifact: scalafmt-linux-musl-arm64
            env:
              NATIVE_IMAGE_STATIC: musl
    env: ${{ matrix.env }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up GraalVM
        uses: graalvm/setup-graalvm@v1
        with:
          java-version: '21'
          distribution: 'graalvm-community'
          native-image-musl: ${{ matrix.libc == 'musl' }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
      - uses: sbt/setup-sbt@v1
      - run: bin/build-native-image.sh
        env:
          CI: true
      - uses: actions/upload-artifact@master
        with:
          name: ${{ matrix.artifact }}
          path: scalafmt
      - name: Upload release to Github
        if: github.event_name == 'release'
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: scalafmt
          asset_name: ${{ matrix.artifact }}
          asset_content_type: application/zip
  scala-native:
    if: github.event_name == 'release'
    permissions:
      contents: write  # for actions/upload-release-asset to upload release asset
    strategy:
      fail-fast: false
      matrix:
        deploy: [ 
          { os : macOS-13, name: scalafmt-x86_64-apple-darwin}, 
          { os : macOS-14, name: scalafmt-aarch64-apple-darwin}, 
          { os : ubuntu-latest, name: scalafmt-x86_64-pc-linux}, 
          { os : ubuntu-24.04-arm, name: scalafmt-aarch64-pc-linux}, 
          { os : windows-latest, name: scalafmt-x86_64-pc-win32}
        ]
    runs-on: ${{ matrix.deploy.os }}
    env:
      BINARY_NAME: ${{ (startsWith(matrix.deploy.os, 'windows') && 'scalafmt.exe') || 'scalafmt' }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'sbt'
      - uses: sbt/setup-sbt@v1
      - run: sbt scala-native
        env:
          CI: true
      - uses: actions/upload-artifact@master
        with:
          name: ${{ matrix.deploy.name }}
          path: ${{ env.BINARY_NAME }}
      - name: Upload release to Github
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ${{ env.BINARY_NAME }}
          asset_name: ${{ matrix.deploy.name }}
          asset_content_type: application/zip
  dockerize:
    needs: [scala-native]
    runs-on: ${{ matrix.platform == 'linux/arm64' && 'ubuntu-24.04-arm' || 'ubuntu-latest' }}
    if: github.event_name == 'release'
    strategy:
      matrix:
        platform: [linux/amd64, linux/arm64]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Downloading scalafmt for Docker Build
        uses: actions/download-artifact@v4
        with:
          name: scalafmt${{ matrix.platform == 'linux/arm64' && 'aarch64' || 'x86_64' }}-pc-linux
          path: tmp/scalafmt
      - name: Login to DockerHub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build and push
        id: build
        uses: docker/build-push-action@v6
        with:
          context: .
          platforms: ${{ matrix.platform }}
          push: true
          outputs: type=image,"name=scalameta/scalafmt",push-by-digest=true,name-canonical=true
      - name: Export digest
        run: |
          mkdir -p ${{ runner.temp }}/digests
          digest="${{ steps.build.outputs.digest }}"
          touch "${{ runner.temp }}/digests/${digest#sha256:}"
      - name: Upload digest
        uses: actions/upload-artifact@v4
        with:
          name: digests-${{ matrix.platform == 'linux/arm64' && 'arm64' || 'amd64' }}
          path: ${{ runner.temp }}/digests/*
          if-no-files-found: error
          retention-days: 1

  merge-docker-manifest:
    runs-on: ubuntu-latest
    needs: [dockerize]
    steps:
      - name: Download digests
        uses: actions/download-artifact@v4
        with:
          path: ${{ runner.temp }}/digests
          pattern: digests-*
          merge-multiple: true
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Docker Meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: scalameta/scalafmt
          tags: |
            type=raw,value=${{ github.event.release.tag_name }}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Create manifest list and push
        working-directory: ${{ runner.temp }}/digests
        run: |
          docker buildx imagetools create $(jq -cr '.tags | map("-t " + .) | join(" ")' <<< "$DOCKER_METADATA_OUTPUT_JSON") \
            $(printf 'scalameta/scalafmt@sha256:%s ' *)
      - name: Inspect image
        run: |
          docker buildx imagetools inspect scalameta/scalafmt:${{ steps.meta.outputs.tags }}
